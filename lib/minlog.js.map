{"version":3,"sources":["../src/minlog.js"],"names":[],"mappings":"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","file":"minlog.js","sourcesContent":["import _ from 'lodash-firecloud';\n\nimport {\n  getCallerInfo\n} from './util';\n\nexport let defaultLevels = {\n  time: 70,\n\n  // npm alias\n  fatal: 0, // emergency\n  verbose: 70, // debug\n  silly: 80,\n\n  // https://tools.ietf.org/html/rfc3164 (multiplier 10)\n  emergency: 0,\n  alert: 10,\n  critical: 20,\n  error: 30,\n  warning: 40,\n  notice: 50,\n  informational: 60,\n  debug: 70,\n\n  // console\n  warn: 40, // warning\n  info: 60, // informational\n  trace: 90\n};\n\nexport class MinLog {\n  levels = defaultLevels;\n\n  serializers = [];\n\n  listeners = [];\n\n  constructor({\n    serializers = this.serializers,\n    listeners = this.listeners,\n    levels = {}\n  } = {}) {\n    this.serializers = _.clone(serializers);\n    this.listeners = _.clone(listeners);\n    this.levels = _.merge(this.levels, levels);\n\n    _.forEach(this.levels, (levelCode, levelName) => {\n      this[levelName] = _.bind(this.log, this, levelCode);\n    });\n  }\n\n  levelIsBeyondGroup(levelCodeOrName, groupCodeOrName) {\n    let levelCode = this.levelToLevelCode(levelCodeOrName);\n    let maxLevelCode = this.maxLevelCodeInGroup(groupCodeOrName);\n    return levelCode > maxLevelCode;\n  }\n\n  levelToLevelCode(levelCodeOrName) {\n    if (_.isInteger(levelCodeOrName)) {\n      let levelCode = levelCodeOrName;\n      return levelCode;\n    }\n\n    let levelName = _.toLower(levelCodeOrName);\n    if (/^lvl[0-9]+$/.test(levelName)) {\n      let levelCode = _.replace(levelName, /^lvl/, '');\n      levelCode = _.toInteger(levelCode);\n      return levelCode;\n    }\n\n    if (_.isUndefined(this.levels[levelName])) {\n      throw new Error(`Unknown level name ${levelName}. Known: ${_.keys(this.levels)}.`);\n    }\n\n    return this.levels[levelName];\n  }\n\n  levelToLevelName(levelCodeOrName) {\n    if (_.isString(levelCodeOrName)) {\n      let levelName = _.toLower(levelCodeOrName);\n\n      if (_.isUndefined(this.levels[levelName])) {\n        throw new Error(`Unknown level name ${levelName}. Known: ${_.keys(this.levels)}.`);\n      }\n\n      return levelName;\n    }\n\n    let levelCode = levelCodeOrName;\n    let levelName = _.invert(this.levels)[levelCode] || `lvl${levelCode}`;\n    return levelName;\n  }\n\n  maxLevelCodeInGroup(levelCodeOrName) {\n    let levelCode = this.levelToLevelCode(levelCodeOrName);\n\n    // round up levelCode to next level group, not inclusive\n    let maxLevelCodeGroup = _.floor(levelCode / 10) + 1;\n    let maxLevelCode = maxLevelCodeGroup * 10 - 1;\n    return maxLevelCode;\n  }\n\n  async log(levelCodeOrName, ...args) {\n    let levelCode = levelCodeOrName;\n    if (_.isString(levelCodeOrName)) {\n      levelCode = this.levels[_.toLower(levelCodeOrName)];\n    }\n\n    let src = getCallerInfo(5);\n\n    let entry = {\n      _args: args,\n      _time: new Date(),\n      _level: levelCode,\n      _src: src\n    };\n\n    _.forEach(args, function(arg, index) {\n      let amendEntry = {\n        [`_arg${index}`]: arg\n      };\n\n      if (_.isError(arg) && _.isUndefined(entry.err)) {\n        amendEntry.err = arg;\n      } else if (_.isString(arg) && _.isUndefined(entry.msg)) {\n        amendEntry.msg = arg;\n      } else if (_.isPlainObject(arg)) {\n        _.defaults(amendEntry, arg);\n      }\n\n      _.merge(entry, amendEntry);\n    });\n\n    let rawEntry = _.cloneDeep(entry);\n\n    for (let serializer of this.serializers) {\n      // eslint-disable-next-line require-atomic-updates\n      entry = await _.alwaysPromise(serializer({entry, logger: this, rawEntry}));\n    }\n\n    for (let listener of this.listeners) {\n      await _.alwaysPromise(listener({entry, logger: this, rawEntry}));\n    }\n  }\n\n  // trackTime(...logArgs, fn)\n  async trackTime(...args) {\n    let fn = args.pop();\n    args.push({\n      _timeStart: new Date()\n    });\n\n    this.time(...args);\n\n    await _.alwaysPromise(fn());\n    args.push({\n      _timeEnd: new Date()\n    });\n\n    this.time(...args);\n  }\n}\n\nexport default MinLog;\n"]}