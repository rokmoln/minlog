{"version":3,"sources":["../src/minlog.js"],"names":[],"mappings":"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","file":"minlog.js","sourcesContent":["import _ from 'lodash';\nimport {\n  getCallerInfo\n} from './util';\n\nexport default class MinLog {\n  levels = {\n    // npm alias\n    fatal: 0, // emergency\n    verbose: 70, // debug\n    silly: 80,\n\n    // https://tools.ietf.org/html/rfc3164 (multiplier 10)\n    emergency: 0,\n    alert: 10,\n    critical: 20,\n    error: 30,\n    warning: 40,\n    notice: 50,\n    informational: 60,\n    debug: 70,\n\n    // console\n    warn: 40, // warning\n    info: 60, // informational\n    trace: 90\n  };\n\n  serializers = [];\n  listeners = [];\n\n  constructor({\n    serializers = this.serializers,\n    listeners = this.listeners,\n    levels = {}\n  } = {}) {\n    this.serializers = _.clone(serializers);\n    this.listeners = _.clone(listeners);\n    this.levels = _.merge(this.levels, levels);\n\n    _.forEach(this.levels, (_level, levelName) => {\n      this[levelName] = _.bind(this.log, this, levelName);\n    });\n  }\n\n  levelToLevelName(level) {\n    if (_.isString(level)) {\n      // eslint-disable-next-line prefer-destructuring\n      level = this.levels[level];\n\n      if (_.isUndefined(level)) {\n        throw new Error(`Unknown level name ${level}. Known: ${_.keys(this.levels)}.`);\n      }\n    }\n\n    let levelName = _.invert(this.levels)[level] || `lvl${level}`;\n    return levelName;\n  }\n\n  async log(level, ...args) {\n    if (_.isString(level)) {\n      // eslint-disable-next-line prefer-destructuring\n      level = this.levels[level];\n    }\n\n    let src = getCallerInfo(5);\n\n    let entry = {\n      _args: undefined,\n      _time: new Date(),\n      _level: level,\n      _src: src\n    };\n\n    _.forEach(args, function(arg) {\n      if (_.isError(arg) && _.isUndefined(entry.msg)) {\n        entry.err = arg;\n      } else if (_.isString(arg) && _.isUndefined(entry.msg)) {\n        entry.msg = arg;\n      } else if (_.isPlainObject(arg)) {\n        _.merge(entry, arg);\n      } else {\n        entry._args = _.merge(entry._args, {\n          [`index`]: arg\n        });\n      }\n    });\n\n    let rawEntry = _.cloneDeep(entry);\n    rawEntry._args = args;\n\n    await Promise.all(_.map(this.serializers, async (serializer) => {\n      entry = await serializer({entry, logger: this, rawEntry});\n    }));\n\n    _.forEach(this.listeners, (listener) => {\n      listener({entry, logger: this, rawEntry});\n    });\n  }\n}\n"]}