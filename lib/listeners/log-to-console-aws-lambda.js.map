{"version":3,"sources":["../../src/listeners/log-to-console-aws-lambda.js"],"names":[],"mappings":"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","file":"log-to-console-aws-lambda.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport fastSafeStringify from 'fast-safe-stringify';\nimport util from 'util';\n\nimport {\n  logToConsole,\n  serialize as serializeLogToConsole,\n  toFormatArgs\n} from './log-to-console';\n\nlet _nonBreakingWhitespace = 'Â ';\n\nlet _isBrowser = typeof window !== 'undefined';\nlet _isNode = typeof process !== 'undefined' && _.isDefined(_.get(process, 'versions.node'));\nlet _isAwsLambda = _isNode && _.isDefined(process.env.LAMBDA_TASK_ROOT);\n\n/*\ncfg has 1 property\n- level (optional, defaults to trace)\n  Any log entry less important that cfg.level is ignored.\n*/\n\nexport let logToConsoleAwsLambda = function(cfg = {}) {\n  if (!_isAwsLambda) {\n    // use vanilla logger e.g. behind aws-lambda-proxy\n    return logToConsole(cfg);\n  }\n\n  // from https://github.com/Financial-Times/lambda-logger\n  // This does make process.stdout.write a blocking function (process.stdout._handle.setBlocking(true);),\n  // as AWS Lambda previously streamed to an output which was synchronous,\n  // but has since changed to asynchronous behaviour, leading to lost logs.\n  if (_.isFunction(_.get(process, 'stdout._handle.setBlocking'))) {\n    process.stdout._handle.setBlocking(true);\n  }\n\n  // eslint-disable-next-line complexity\n  return async function({entry, logger, rawEntry}) {\n    if (_.filter(rawEntry._args).length === 1 && rawEntry._args[0]._babelSrc) {\n      return;\n    }\n\n    if (logger.levelIsBeyondGroup(entry._level, cfg.level)) {\n      return;\n    }\n\n    let {\n      cfg: cfg2,\n      now,\n      formattedLevelName,\n      src,\n      msg,\n      extra\n    } = serializeLogToConsole({entry, logger, rawEntry, cfg});\n    cfg = cfg2;\n\n    msg = `${msg} `;\n    msg = _.padEnd(msg, 255, _nonBreakingWhitespace);\n    msg = `${msg}.`;\n\n    // prefer JSON output over util.inspect output\n    extra = fastSafeStringify(extra, undefined, 2);\n    extra = `\\n${extra}`;\n\n    // maintain whitespace (looking at you AWS CloudWatch WebUI)\n    // by replacing space with non-breaking space\n    extra = _.replace(extra, / /g, _nonBreakingWhitespace);\n\n    let extraArgs = [\n      extra\n    ];\n\n    let formatArgs = [];\n\n    // timestamp\n    formatArgs.push([\n      '%s',\n      now\n    ]);\n\n    // awsRequestId\n    formatArgs.push([\n      ' %s',\n      // skip for readability, still available in 'extra'\n      // entry.context.awsRequestId\n      '-'\n    ]);\n\n    // level name\n    formatArgs.push([\n      '\\t%s',\n      formattedLevelName\n    ]);\n\n    // src\n    if (src) {\n      formatArgs.push([\n        ' %s',\n        src\n      ]);\n    }\n\n    // msg\n    formatArgs.push([\n      '\\n%s',\n      msg\n    ]);\n\n    formatArgs = toFormatArgs(...formatArgs);\n    formatArgs = _.concat(formatArgs, extraArgs);\n\n    // eslint-disable-next-line global-require\n    let chunk = util.format(...formatArgs);\n    chunk = _.replace(chunk, /\\n/g, '\\r');\n    chunk = `${chunk}\\n`;\n    process.stdout.write(chunk);\n  };\n};\n\nexport default logToConsoleAwsLambda;\n"]}