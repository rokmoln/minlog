{"version":3,"sources":["../../src/listeners/log-to-console-aws-lambda.ts"],"names":[],"mappings":"8MAAA;AACA;AACA;;;;;;;AAOA,gD;;;;;;AAMA,IAAI,sBAAsB,GAAG,GAA7B,C;;AAEA,IAAI,OAAO,GAAG,OAAO,OAAP,KAAmB,WAAnB,IAAkC,yBAAE,SAAF,CAAY,yBAAE,GAAF,CAAM,OAAN,EAAe,eAAf,CAAZ,CAAhD,C;AACA,IAAI,YAAY,GAAG,mBAAW,yBAAE,SAAF,CAAY,OAAO,CAAC,GAAR,CAAY,gBAAxB,CAA9B;;AAEA;;;;;;AAMO,IAAI,qBAAqB,GAAG,UAAS,GAE3C;;AAAG,EAF+B,EAEX;AACtB,MAAI,qBAAJ,EAAmB;AACjB;AACA,WAAO,gCAAa,GAAb,CAAP;AACD;;AAED;AACA;AACA;AACA;AACA,MAAI,yBAAE,UAAF,CAAa,yBAAE,GAAF,CAAM,OAAN,EAAe,4BAAf,CAAb,CAAJ,EAAgE;AAC9D;AACA,IAAA,OAAO,CAAC,MAAR,CAAe,OAAf,CAAuB,WAAvB,CAAmC,IAAnC;AACD;;AAED;AACA,SAAO,gBAAe,EAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAAf,EAA0C;AAC/C;AACA,IAAA,GAAG,GAAG,yBAAE,UAAF,CAAa,GAAb,6CAAoB,MAAM,GAAG,EAA7B,wLAAkC,MAAM,GAAxC,+IAAN;;AAEA,QAAI,yBAAE,SAAF,CAAY,QAAZ;AACA,6BAAE,MAAF,CAAS,QAAQ,CAAC,KAAlB,EAAyB,MAAzB,KAAoC,CADpC;AAEA,6BAAE,SAAF,CAAY,QAAQ,CAAC,KAAT,CAAe,CAAf,EAAkB,SAA9B,CAFJ,EAE8C;AAC5C;AACD;;AAED,QAAI,yBAAE,SAAF,CAAY,GAAG,CAAC,KAAhB,KAA0B,MAAM,CAAC,kBAAP,CAA0B,KAAK,CAAC,MAAhC,EAAwC,GAAG,CAAC,KAA5C,CAA9B,EAAkF;AAChF;AACD;;AAED,QAAI;AACF,MAAA,GAAG,EAAE,IADH;AAEF,MAAA,GAFE;AAGF,MAAA,kBAHE;AAIF,MAAA,GAJE;AAKF,MAAA;AACF;AANI,QAOA,6BAAsB,EAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,GAA1B,EAAtB,CAPJ;AAQA;AACA,IAAA,GAAG,GAAG,IAAN;;AAEA,IAAA,GAAG,GAAI,GAAE,GAAI,GAAb;AACA,IAAA,GAAG,GAAG,yBAAE,MAAF,CAAS,GAAT,EAAc,GAAd,iCAAN;AACA,IAAA,GAAG,GAAI,GAAE,GAAI,GAAb;;AAEA;AACA,QAAI,QAAQ,GAAG,yBAAE,IAAF,CAAO,QAAP,EAAiB;AAC9B,WAD8B,CAAjB,CAAf;;AAGA,QAAI,WAAW,GAAG,gCAAkB,QAAlB,EAA4B,SAA5B,EAAuC,CAAvC,CAAlB;AACA,IAAA,WAAW,GAAI,KAAI,WAAY,EAA/B;;AAEA;AACA;AACA,IAAA,WAAW,GAAG,yBAAE,OAAF,CAAU,WAAV,EAAuB,IAAvB,iCAAd;;AAEA,QAAI,SAAS,GAAG;AACd,IAAA,WADc,CAAhB;;;AAIA,QAAI,WAAW,GAAG,EAAlB;;AAEA;AACA,IAAA,WAAW,CAAC,IAAZ,CAAiB;AACf,QADe;AAEf,IAAA,GAFe,CAAjB;;;AAKA;AACA,IAAA,WAAW,CAAC,IAAZ,CAAiB;AACf,UADe;AAEf,6BAAE,GAAF,CAAM,KAAN,EAAa,kBAAb,EAAiC,GAAjC,CAFe,CAAjB;;;AAKA;AACA,IAAA,WAAW,CAAC,IAAZ,CAAiB;AACf,UADe;AAEf,IAAA,kBAFe,CAAjB;;;AAKA;AACA,QAAI,yBAAE,SAAF,CAAY,GAAZ,CAAJ,EAAsB;AACpB,MAAA,WAAW,CAAC,IAAZ,CAAiB;AACf,YADe;AAEf,MAAA,GAFe,CAAjB;;AAID;;AAED;AACA,IAAA,WAAW,CAAC,IAAZ,CAAiB;AACf,UADe;AAEf,IAAA,GAFe,CAAjB;;;AAKA,QAAI,UAAU,GAAG,gCAAa,GAAG,WAAhB,CAAjB;AACA,IAAA,UAAU,GAAG,yBAAE,MAAF,CAAS,UAAT,EAAqB,SAArB,CAAb;;AAEA,QAAI;AACF,IAAA,MADE;AAEF,OAAG,MAFD;AAGA,IAAA,UAHJ;;AAKA;AACA,QAAI,KAAK,GAAG,cAAK,MAAL,CAAY,MAAZ,EAAoB,GAAG,MAAvB,CAAZ;AACA,IAAA,KAAK,GAAG,yBAAE,OAAF,CAAU,KAAV,EAAiB,KAAjB,EAAwB,IAAxB,CAAR;AACA,IAAA,KAAK,GAAI,GAAE,KAAM,IAAjB;AACA,IAAA,OAAO,CAAC,MAAR,CAAe,KAAf,CAAqB,KAArB;AACD,GA3FD;AA4FD,CA9GM,C","file":"log-to-console-aws-lambda.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport fastSafeStringify from 'fast-safe-stringify';\nimport util from 'util';\n\nimport {\n  MinLogLevel,\n  MinLogListener\n} from '../types';\n\nimport {\n  logToConsole,\n  serialize as serializeLogToConsole,\n  toFormatArgs\n} from './log-to-console';\n\nlet _nonBreakingWhitespace = 'Â ';\n\nlet _isNode = typeof process !== 'undefined' && _.isDefined(_.get(process, 'versions.node'));\nlet _isAwsLambda = _isNode && _.isDefined(process.env.LAMBDA_TASK_ROOT);\n\n/*\ncfg has 1 property\n- level (optional, defaults to trace)\n  Any log entry less important that cfg.level is ignored.\n*/\n\nexport let logToConsoleAwsLambda = function(cfg: {\n  level?: MinLogLevel\n} = {}): MinLogListener {\n  if (!_isAwsLambda) {\n    // use vanilla logger e.g. behind aws-lambda-proxy\n    return logToConsole(cfg);\n  }\n\n  // from https://github.com/Financial-Times/lambda-logger\n  // This does make process.stdout.write a blocking function (process.stdout._handle.setBlocking(true);),\n  // as AWS Lambda previously streamed to an output which was synchronous,\n  // but has since changed to asynchronous behaviour, leading to lost logs.\n  if (_.isFunction(_.get(process, 'stdout._handle.setBlocking'))) {\n    // @ts-ignore\n    process.stdout._handle.setBlocking(true);\n  }\n\n  // eslint-disable-next-line complexity\n  return async function({entry, logger, rawEntry}) {\n    // eslint-disable-next-line require-atomic-updates\n    cfg = _.isFunction(cfg) ? await cfg() : await cfg;\n\n    if (_.isDefined(rawEntry) &&\n        _.filter(rawEntry._args).length === 1 &&\n        _.isDefined(rawEntry._args[0]._babelSrc)) {\n      return;\n    }\n\n    if (_.isDefined(cfg.level) && logger.levelIsBeyondGroup(entry._level, cfg.level)) {\n      return;\n    }\n\n    let {\n      cfg: cfg2,\n      now,\n      formattedLevelName,\n      src,\n      msg\n    // @ts-ignore\n    } = serializeLogToConsole({entry, logger, rawEntry, cfg});\n    // eslint-disable-next-line require-atomic-updates\n    cfg = cfg2;\n\n    msg = `${msg} `;\n    msg = _.padEnd(msg, 255, _nonBreakingWhitespace);\n    msg = `${msg}.`;\n\n    // prefer JSON output over util.inspect output\n    let rawExtra = _.omit(rawEntry, [\n      '_args'\n    ]);\n    let rawExtraStr = fastSafeStringify(rawExtra, undefined, 2);\n    rawExtraStr = `\\n${rawExtraStr}`;\n\n    // maintain whitespace (looking at you AWS CloudWatch WebUI)\n    // by replacing space with non-breaking space\n    rawExtraStr = _.replace(rawExtraStr, / /g, _nonBreakingWhitespace);\n\n    let extraArgs = [\n      rawExtraStr\n    ];\n\n    let formatPairs = [];\n\n    // timestamp\n    formatPairs.push([\n      '%s',\n      now\n    ]);\n\n    // awsRequestId\n    formatPairs.push([\n      '\\t%s',\n      _.get(entry, 'ctx.awsRequestId', '-')\n    ]);\n\n    // level name\n    formatPairs.push([\n      '\\t%s',\n      formattedLevelName\n    ]);\n\n    // src\n    if (_.isDefined(src)) {\n      formatPairs.push([\n        '\\t%s',\n        src\n      ]);\n    }\n\n    // msg\n    formatPairs.push([\n      '\\n%s',\n      msg\n    ]);\n\n    let formatArgs = toFormatArgs(...formatPairs);\n    formatArgs = _.concat(formatArgs, extraArgs);\n\n    let [\n      format,\n      ...params\n    ] = formatArgs;\n\n    // eslint-disable-next-line global-require\n    let chunk = util.format(format, ...params);\n    chunk = _.replace(chunk, /\\n/g, '\\r');\n    chunk = `${chunk}\\n`;\n    process.stdout.write(chunk);\n  };\n};\n\nexport default logToConsoleAwsLambda;\n"]}