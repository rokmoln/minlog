{"version":3,"sources":["../../src/serializers/time.js"],"names":[],"mappings":"4HAAA;AACA;AACA,yE;;AAEO,IAAI,aAAa,GAAG,gBAAe,EAAC,KAAD,EAAf,EAAwB;AACjD,MAAI;AACF,IAAA,KADE;AAEF,IAAA,UAFE;AAGF,IAAA,QAHE;AAIA,EAAA,KAJJ;;AAMA,MAAI,CAAC,yBAAE,MAAF,CAAS,KAAT,CAAL,EAAsB;AACpB,WAAO,KAAP;AACD;;AAED,EAAA,KAAK,CAAC,KAAN,GAAc;AACZ,IAAA,KAAK,EAAE,qBAAO,KAAP,EAAc,WAAd,EADK;AAEZ,IAAA,UAAU,EAAE,qBAAO,KAAP,EAAc,WAAd,CAA0B,IAA1B,CAFA;AAGZ,IAAA,IAAI,EAAE,wBAAS,EAAT,CAAY,KAAZ,EAHM;AAIZ,IAAA,UAAU,EAAE,qBAAO,KAAP,EAAc,SAAd,EAJA,EAAd;;;AAOA,MAAI,CAAC,yBAAE,MAAF,CAAS,UAAT,CAAL,EAA2B;AACzB,WAAO,KAAP;AACD;;AAED,EAAA,KAAK,CAAC,UAAN,GAAmB;AACjB,IAAA,KAAK,EAAE,qBAAO,UAAP,EAAmB,WAAnB,EADU;AAEjB,IAAA,UAAU,EAAE,qBAAO,UAAP,EAAmB,WAAnB,CAA+B,IAA/B,CAFK;AAGjB,IAAA,IAAI,EAAE,wBAAS,EAAT,CAAY,KAAZ,EAHW;AAIjB,IAAA,UAAU,EAAE,qBAAO,UAAP,EAAmB,SAAnB,EAJK,EAAnB;;;AAOA,MAAI,CAAC,yBAAE,MAAF,CAAS,QAAT,CAAL,EAAyB;AACvB,WAAO,KAAP;AACD;;AAED,EAAA,KAAK,CAAC,QAAN,GAAiB;AACf,IAAA,KAAK,EAAE,qBAAO,QAAP,EAAiB,WAAjB,EADQ;AAEf,IAAA,UAAU,EAAE,qBAAO,QAAP,EAAiB,WAAjB,CAA6B,IAA7B,CAFG;AAGf,IAAA,IAAI,EAAE,wBAAS,EAAT,CAAY,KAAZ,EAHS;AAIf,IAAA,UAAU,EAAE,qBAAO,QAAP,EAAiB,SAAjB,EAJG,EAAjB;;;AAOA,MAAI,QAAQ,GAAG,gBAAO,QAAP,CAAgB,QAAQ,GAAG,UAA3B,CAAf;AACA,EAAA,KAAK,CAAC,SAAN,GAAkB;AAChB,IAAA,KAAK,EAAE,QAAQ,CAAC,WAAT,EADS;AAEhB,IAAA,KAAK,EAAE,QAAQ,CAAC,QAAT,EAFS;AAGhB,IAAA,EAAE,EAAE,QAAQ,CAAC,cAAT,EAHY,EAAlB;;;AAMA,SAAO,KAAP;AACD,CAhDM,C","file":"time.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport moment from 'moment';\nimport momentTz from 'moment-timezone';\n\nexport let serializeTime = async function({entry}) {\n  let {\n    _time,\n    _timeStart,\n    _timeEnd\n  } = entry;\n\n  if (!_.isDate(_time)) {\n    return entry;\n  }\n\n  entry._time = {\n    stamp: moment(_time).toISOString(),\n    localStamp: moment(_time).toISOString(true),\n    zone: momentTz.tz.guess(),\n    utc_offset: moment(_time).utcOffset()\n  };\n\n  if (!_.isDate(_timeStart)) {\n    return entry;\n  }\n\n  entry._timeStart = {\n    stamp: moment(_timeStart).toISOString(),\n    localStamp: moment(_timeStart).toISOString(true),\n    zone: momentTz.tz.guess(),\n    utc_offset: moment(_timeStart).utcOffset()\n  };\n\n  if (!_.isDate(_timeEnd)) {\n    return entry;\n  }\n\n  entry._timeEnd = {\n    stamp: moment(_timeEnd).toISOString(),\n    localStamp: moment(_timeEnd).toISOString(true),\n    zone: momentTz.tz.guess(),\n    utc_offset: moment(_timeEnd).utcOffset()\n  };\n\n  let duration = moment.duration(_timeEnd - _timeStart);\n  entry._duration = {\n    stamp: duration.toISOString(),\n    human: duration.humanize(),\n    ms: duration.asMilliseconds()\n  };\n\n  return entry;\n};\n\nexport default serializeTime;\n"]}